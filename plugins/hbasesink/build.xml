<?xml version="1.0"?>
<!--
 * Licensed to Cloudera, Inc. under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  Cloudera, Inc. licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->

<!--
   Before you can run these subtargets directly, you need
   to call at top-level: ant
-->

<project name="flume-hbase" default="jar">
  <property name="javac.debug" value="on"/>
  <property name="javac.optimize" value="on"/>
  <property name="javac.deprecation" value="off"/>
  <property name="javac.version" value="1.5"/>
  <property name="javac.args" value=""/>
  <property name="javac.args.warnings" value="-Xlint:unchecked"/>

  <property name="flume.base" value="../.."/>
  <property name="build.dir" value="build"/>
  <property name="build.test" value="${build.dir}/test"/>
  <property name="build.encoding" value="ISO-8859-1"/>

  <property name="test.src.dir" value="src/javatest"/>
  <property name="test.lib.dir" value="${flume.base}/libtest"/>
  <property name="test.build.dir" value="${build.dir}/test"/>
  <property name="test.generated.dir" value="${test.build.dir}/src"/>
  <property name="test.build.data" value="${test.build.dir}/data"/>
  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.build.classes" value="${test.build.dir}/classes"/>
  <property name="test.include" value="Test*"/>
  <property name="test.classpath.id" value="test.classpath"/>
  <property name="test.output" value="yes"/>
  <property name="test.timeout" value="900000"/>
  <property name="test.junit.output.format" value="plain"/>

  <path id="classpath">
    <!-- in case we are running in dev env -->
    <pathelement location="${flume.base}/build/classes"/>
    <fileset dir="${flume.base}">
      <include name="flume-*.jar" />
    </fileset>
    <fileset dir="${flume.base}/lib">
      <include name="**/slf4j-*.jar" />
      <include name="**/hadoop-*.jar" />
      <include name="**/guava-*.jar" />
    </fileset>
    <fileset dir="${flume.base}/plugins/hbasesink/lib">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- the unit test classpath: uses test.src.dir for configuration -->
  <path id="test.classpath">
    <pathelement location="${test.build.classes}" />
    <pathelement location="${test.src.dir}"/>
    <pathelement location="${build.dir}"/>
    <fileset dir="${test.lib.dir}">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
    <fileset dir="${flume.base}/lib">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
    <fileset dir="${flume.base}/plugins/hbasesink">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
    <fileset dir="${flume.base}/plugins/hbasesink/lib">
      <include name="**/*.jar" />
    </fileset>
    <path refid="classpath"/>
  </path>

  <target name="jar">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/classes"/>

    <javac srcdir="./src/java" destdir="${build.dir}/classes" debug="${javac.debug}">
      <classpath refid="classpath"/>
    </javac>

    <jar jarfile="hbase_sink.jar" basedir="${build.dir}/classes"/>
  </target>

  <target name="clean">
    <echo message="Cleaning generated files and stuff"/>
    <delete dir="build" />
    <delete file="hbase_sink.jar" />
  </target>

  <!-- ================================================================== -->
  <!-- Compile test code                                                  -->
  <!-- ================================================================== -->
  <target name="compile-plugin-test" depends="jar">
    <mkdir dir="${build.dir}/test"/>
    <mkdir dir="${build.dir}/test/classes"/>

    <javac
     encoding="${build.encoding}"
     srcdir="${test.src.dir}"
     includes="**/*.java"
     destdir="${test.build.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     target="${javac.version}"
     source="${javac.version}"
     deprecation="${javac.deprecation}">
      <compilerarg line="${javac.args}" />
      <classpath refid="test.classpath"/>
    </javac>
 </target>


  <!-- ================================================================== -->
  <!-- Run unit tests                                                     -->
  <!-- ================================================================== -->
  <target name="test" depends="jar,compile-plugin-test" >
    <echo message="Unit Testing of HBase Sink"/>
    <junit
      printsummary="yes" showoutput="${test.output}"
      haltonfailure="no" fork="yes" maxmemory="1024m"
      errorProperty="tests.failed" failureProperty="tests.failed"
      timeout="${test.timeout}"
      dir="${test.build.dir}">

      <!-- uncomment this if you want to attach a debugger -->
      <!--
      <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=2601" />
      -->
      <env key="FLUME_HOME" value="${basedir}" />
      <sysproperty key="javax.xml.parsers.DocumentBuilderFactory" value="com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl" />
      <sysproperty key="java.library.path" value="${lib.dir}" />
      <sysproperty key="build.test" value="${build.test}"/>

      <!-- we want more log4j output when running unit tests -->
      <sysproperty key="hadoop.root.logger"
        value="INFO,console" />

      <!-- tools.jar from Sun JDK also required to invoke javac. -->
      <classpath>
        <path refid="test.classpath"/>
        <pathelement path="${env.JAVA_HOME}/lib/tools.jar" />
      </classpath>
      <formatter type="${test.junit.output.format}" />
      <batchtest todir="${build.test}" unless="testcase">
        <fileset dir="${test.src.dir}"
                 includes="**/Test*.java" excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${build.test}" if="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>

</project>

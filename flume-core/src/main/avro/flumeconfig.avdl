/**
 * Licensed to Cloudera, Inc. under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  Cloudera, Inc. licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// flumeconfig.avdl 

// This is the a heartbeating and configuration service that allows
// clients to contact a flume configuration server.

// This allows for dynamically configurable flume nodes (setup sources,
// sinks).  Eventually this can be used by flume nodes to send
// monitoring information.

@namespace("com.cloudera.flume.conf.avro")


protocol AvroFlumeClientServer{

import schema "avroflumereport.avsc";

  enum FlumeNodeState { HELLO, IDLE, CONFIGURING,
    ACTIVE, ERROR, LOST, DECOMMISSIONED, CLOSING }
  record AvroFlumeConfigData {
    long timestamp;
    string sourceConfig;
    string sinkConfig;
    long sourceVersion;
    long sinkVersion;
    string flowID;
  }
  
  
  record FlumeReportAvro {
    map<string> stringMetrics;
    map<long> longMetrics;
    map<double> doubleMetrics;
  }


  record AvroFlumeConfigDataMap {
    map<AvroFlumeConfigData> configs;
  }

  record AvroFlumeNodeMap {
    map<array<string>> nodemap;
  }


  record AvroFlumeChokeMap {
    map<map<int>> chokemap;
  }

  // returns true if the sourceId's configuration has changed
  boolean heartbeat(string logicalNode, string physicalNode, string host,
    FlumeNodeState s, long timestamp);
    
  // This gets the configuration from the specified sourceId/name 
  union { AvroFlumeConfigData, null } getConfig(string physNode);
  
  array<string> getLogicalNodes(string physNode);
  
  //this returns a map from ChokeIds to their respective limits for the given physicalnode
  map<int> getChokeMap(string physNode);
  
  
  // This marks a batch as complete
  void acknowledge(string ackid);
  
  // This is checks to see if a batch is complete
  boolean checkAck(string ackid);
 
  // For nodes to send reports to the master
  void putReports(map<com.cloudera.flume.reporter.server.avro.AvroFlumeReport> reports);
}

/**
 * Licensed to Cloudera, Inc. under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  Cloudera, Inc. licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 // mastercontrol.avdl
 
 @namespace("com.cloudera.flume.conf.avro")
 
// Master configuration and administration interface
protocol FlumeMasterAdminServerAvro {
  // These two definitions are duplicates (Avro IDL doesn't support includes)
  enum FlumeNodeState { HELLO, IDLE, CONFIGURING,
    ACTIVE, ERROR, LOST, DECOMMISSIONED, CLOSING }
  record AvroFlumeConfigData {
    long timestamp;
    string sourceConfig;
    string sinkConfig;
    long sourceVersion;
    long sinkVersion;
    string flowID;
  }

  record FlumeMasterCommandAvro {
    string command;
    array<string> arguments;
  }

  record FlumeNodeStatusAvro {
    FlumeNodeState state;
    long version;
    long lastseen;
    long  lastSeenDeltaMillis;
    string host;
    string physicalNode;
  }
  
  record CommandStatusAvro {
    long cmdId;
    string state;
    string message;
    FlumeMasterCommandAvro cmd;
  }


  long submit(FlumeMasterCommandAvro command);

  boolean isSuccess(long cmdid);
    
  boolean isFailure(long cmdid);
    
  map<FlumeNodeStatusAvro> getNodeStatuses();
  
  map<AvroFlumeConfigData> getConfigs();
  
  map<array<string>> getMappings(string physicalNode);
  
  boolean hasCmdId(long cmdid);

  CommandStatusAvro getCmdStatus(long cmdid);
}
